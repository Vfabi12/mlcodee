import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

data = pd.read_csv('/content/diabetes.csv')

# Step 2: Data Preprocessing
# Check for missing values (if there are missing values, handle them accordingly)
print("Missing values in the dataset:")
print(data.isnull().sum())

# Scaling the features (excluding the target 'Outcome')
features = data.drop('Outcome', axis=1)
target = data['Outcome']

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Step 3: Split the data into training and test sets

X_train, X_test, y_train, y_test = train_test_split(scaled_features, target, test_size=0.2, random_state=42)

# Step 4: Train a Logistic Regression Model
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

# Step 5: Make predictions on the test data
y_pred = logreg.predict(X_test)

# Step 6: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Print the evaluation metrics
print(f"Accuracy: {accuracy * 100:.2f}%")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)

# Optional: Visualize the Confusion Matrix
plt.figure(figsize=(6,4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.show()




